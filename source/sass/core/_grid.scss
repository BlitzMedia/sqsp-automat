/******************************************************************************
 * Grid / Layout
 *
 * This is for high-level layout utilities.
*******************************************************************************/
.grid__outer {

}
.grid__inner {

}
.grid__col {

}
.grid__item {
    display: flex;
    flex-direction: column;
    position: relative;
    width: 100%;
    &.is-active {
        opacity: 1;
        transform: translate3d( 0, 0, 0 );
    }
    &.is-inactive {
        opacity: 0;
        transform: translate3d( 0, 0, 0 );
    }
}



/******************************************************************************
 * Flexbox
 *
 * Flexbox is CSS magic.
 * This system creates simple shortcodes for adding Flexbox.
*******************************************************************************/
.-flex {
    display: flex;
}
.-flex-col {
    flex-direction: column;
}
.-flex-row {
    flex-direction: row;
}
.-flex-align-start {
    align-items: flex-start;
}
.-flex-align-center {
    align-items: center;
}
.-flex-align-end {
    align-items: flex-end;
}
.-flex-justify-start {
    justify-content: flex-start;
}
.-flex-justify-center {
    justify-content: center;
}
.-flex-justify-end {
    justify-content: flex-end;
}



/******************************************************************************
 * Columns
*******************************************************************************/
@each $col in $grid-columns {
    .column--#{$col}of#{$grid-length} {
        width: percentage( $col / $grid-length );
        }
    .width--#{$col} {
        width: (100 / $col)#{"%"};
        }
    }

.column--1of3 { width: 33.333333333% }
.column--2of3 { width: 66.66666%; }

.column--1of4 { width: 25%; }
.column--2of4 { width: 50%; }
.column--3of4 { width: 75%; }

.column--1of5 { width: 20%; }
.column--2of5 { width: 40%; }
.column--3of5 { width: 60%; }
.column--4of5 { width: 80%; }

.column--1 { width: 100%; }



/******************************************************************************
 * Container Layouts
*******************************************************************************/
.wrapper {
    margin-left: auto;
    margin-right: auto;
    max-width: $page-width + ($wrapper-padding * 2);
    padding-left: $wrapper-padding;
    padding-right: $wrapper-padding;
}
.wrapper--wide {
    margin-left: auto;
    margin-right: auto;
    max-width: $page-width-wide + ($wrapper-padding * 2);
    padding-left: $wrapper-padding;
    padding-right: $wrapper-padding;
}
.wrapper--narrow {
    margin-left: auto;
    margin-right: auto;
    max-width: $page-width-narrow + ($wrapper-padding * 2);
    padding-left: $wrapper-padding;
    padding-right: $wrapper-padding;
}
.expander {
    padding-bottom: $wrapper-padding * 2;
    padding-top: $wrapper-padding * 2;
}
.expander--wide {
    padding-bottom: $wrapper-padding * 4;
    padding-top: $wrapper-padding * 4;
}
.expander--narrow {
    padding-bottom: $wrapper-padding;
    padding-top: $wrapper-padding;
}



/******************************************************************************
 * Instrinsic Layouts & Fitters
*******************************************************************************/

// A "fitter" is meant to fit a container to its parent.
// This is typically used with full-screen, full-width media.
.media__fitter-outer {
    position: relative;
}
.media__fitter-inner {
    bottom: 0;
    left: 0;
    height: auto;
    object-fit: cover;
    position: absolute;
    right: 0;
    top: 0;
    width: auto;
    > * {
        width: 100%;
        height: 100%;
    }
}

// An "intrinsic" container is based off of aspect ratios.
// Use these with the Aspect Ratio classes below.
.media__intrinsic-outer {
    height: 0;
    position: relative;
}
.media__intrinsic-inner {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    overflow: hidden;
}

.-push--left {
    margin-left: 0;
    margin-right: auto;
}
.-push--right {
    margin-left: auto;
    margin-right: 0;
}



/******************************************************************************
 * Aspect Ratios
*******************************************************************************/
.aspect--square {
    padding-bottom: percentage( 1 / 1 );
}
.aspect--standard {
    padding-bottom: percentage( 2 / 3 );
}
.aspect--standard-vertical {
    padding-bottom: percentage( 3 / 2 );
}
.aspect--four-three {
    padding-bottom: percentage( 3 / 4 );
}
.aspect--four-three-vertical {
    padding-bottom: percentage( 4 / 3 );
}
.aspect--widescreen {
    padding-bottom: percentage( 9 / 16 );
}
.aspect--anamorphic-widescreen {
    padding-bottom: percentage( 1 / 2.35 );
}